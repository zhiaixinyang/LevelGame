package com.mdove.levelgame.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mdove.levelgame.greendao.entity.Material;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERIAL".
*/
public class MaterialDao extends AbstractDao<Material, Long> {

    public static final String TABLENAME = "MATERIAL";

    /**
     * Properties of entity Material.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Tips = new Property(3, String.class, "tips", false, "TIPS");
        public final static Property Price = new Property(4, long.class, "price", false, "PRICE");
        public final static Property IsCanMixture = new Property(5, int.class, "isCanMixture", false, "IS_CAN_MIXTURE");
        public final static Property MixtureFormula = new Property(6, String.class, "mixtureFormula", false, "MIXTURE_FORMULA");
    }


    public MaterialDao(DaoConfig config) {
        super(config);
    }
    
    public MaterialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERIAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"NAME\" TEXT," + // 2: name
                "\"TIPS\" TEXT," + // 3: tips
                "\"PRICE\" INTEGER NOT NULL ," + // 4: price
                "\"IS_CAN_MIXTURE\" INTEGER NOT NULL ," + // 5: isCanMixture
                "\"MIXTURE_FORMULA\" TEXT);"); // 6: mixtureFormula
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERIAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Material entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(4, tips);
        }
        stmt.bindLong(5, entity.getPrice());
        stmt.bindLong(6, entity.getIsCanMixture());
 
        String mixtureFormula = entity.getMixtureFormula();
        if (mixtureFormula != null) {
            stmt.bindString(7, mixtureFormula);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Material entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(4, tips);
        }
        stmt.bindLong(5, entity.getPrice());
        stmt.bindLong(6, entity.getIsCanMixture());
 
        String mixtureFormula = entity.getMixtureFormula();
        if (mixtureFormula != null) {
            stmt.bindString(7, mixtureFormula);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Material readEntity(Cursor cursor, int offset) {
        Material entity = new Material( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tips
            cursor.getLong(offset + 4), // price
            cursor.getInt(offset + 5), // isCanMixture
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // mixtureFormula
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Material entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTips(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.getLong(offset + 4));
        entity.setIsCanMixture(cursor.getInt(offset + 5));
        entity.setMixtureFormula(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Material entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Material entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Material entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
