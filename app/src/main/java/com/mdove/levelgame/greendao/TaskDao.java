package com.mdove.levelgame.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mdove.levelgame.greendao.entity.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Tips = new Property(2, String.class, "tips", false, "TIPS");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property AwardMoney = new Property(4, long.class, "awardMoney", false, "AWARD_MONEY");
        public final static Property AwardExp = new Property(5, long.class, "awardExp", false, "AWARD_EXP");
        public final static Property AwardAttack = new Property(6, long.class, "awardAttack", false, "AWARD_ATTACK");
        public final static Property AwardArmor = new Property(7, long.class, "awardArmor", false, "AWARD_ARMOR");
        public final static Property AwardMaxLife = new Property(8, long.class, "awardMaxLife", false, "AWARD_MAX_LIFE");
    }


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TIPS\" TEXT," + // 2: tips
                "\"TYPE\" TEXT," + // 3: type
                "\"AWARD_MONEY\" INTEGER NOT NULL ," + // 4: awardMoney
                "\"AWARD_EXP\" INTEGER NOT NULL ," + // 5: awardExp
                "\"AWARD_ATTACK\" INTEGER NOT NULL ," + // 6: awardAttack
                "\"AWARD_ARMOR\" INTEGER NOT NULL ," + // 7: awardArmor
                "\"AWARD_MAX_LIFE\" INTEGER NOT NULL );"); // 8: awardMaxLife
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(3, tips);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
        stmt.bindLong(5, entity.getAwardMoney());
        stmt.bindLong(6, entity.getAwardExp());
        stmt.bindLong(7, entity.getAwardAttack());
        stmt.bindLong(8, entity.getAwardArmor());
        stmt.bindLong(9, entity.getAwardMaxLife());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(3, tips);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
        stmt.bindLong(5, entity.getAwardMoney());
        stmt.bindLong(6, entity.getAwardExp());
        stmt.bindLong(7, entity.getAwardAttack());
        stmt.bindLong(8, entity.getAwardArmor());
        stmt.bindLong(9, entity.getAwardMaxLife());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tips
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.getLong(offset + 4), // awardMoney
            cursor.getLong(offset + 5), // awardExp
            cursor.getLong(offset + 6), // awardAttack
            cursor.getLong(offset + 7), // awardArmor
            cursor.getLong(offset + 8) // awardMaxLife
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTips(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAwardMoney(cursor.getLong(offset + 4));
        entity.setAwardExp(cursor.getLong(offset + 5));
        entity.setAwardAttack(cursor.getLong(offset + 6));
        entity.setAwardArmor(cursor.getLong(offset + 7));
        entity.setAwardMaxLife(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
