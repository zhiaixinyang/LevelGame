package com.mdove.levelgame.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mdove.levelgame.greendao.entity.RandomAttr;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RANDOM_ATTR".
*/
public class RandomAttrDao extends AbstractDao<RandomAttr, Long> {

    public static final String TABLENAME = "RANDOM_ATTR";

    /**
     * Properties of entity RandomAttr.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RandomAttack = new Property(1, int.class, "randomAttack", false, "RANDOM_ATTACK");
        public final static Property RandomArmor = new Property(2, int.class, "randomArmor", false, "RANDOM_ARMOR");
        public final static Property RandomLife = new Property(3, int.class, "randomLife", false, "RANDOM_LIFE");
        public final static Property RandomLiLiang = new Property(4, int.class, "randomLiLiang", false, "RANDOM_LI_LIANG");
        public final static Property RandomMinJie = new Property(5, int.class, "randomMinJie", false, "RANDOM_MIN_JIE");
        public final static Property RandomZhiHui = new Property(6, int.class, "randomZhiHui", false, "RANDOM_ZHI_HUI");
        public final static Property RandomQiangZhuang = new Property(7, int.class, "randomQiangZhuang", false, "RANDOM_QIANG_ZHUANG");
    }


    public RandomAttrDao(DaoConfig config) {
        super(config);
    }
    
    public RandomAttrDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RANDOM_ATTR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RANDOM_ATTACK\" INTEGER NOT NULL ," + // 1: randomAttack
                "\"RANDOM_ARMOR\" INTEGER NOT NULL ," + // 2: randomArmor
                "\"RANDOM_LIFE\" INTEGER NOT NULL ," + // 3: randomLife
                "\"RANDOM_LI_LIANG\" INTEGER NOT NULL ," + // 4: randomLiLiang
                "\"RANDOM_MIN_JIE\" INTEGER NOT NULL ," + // 5: randomMinJie
                "\"RANDOM_ZHI_HUI\" INTEGER NOT NULL ," + // 6: randomZhiHui
                "\"RANDOM_QIANG_ZHUANG\" INTEGER NOT NULL );"); // 7: randomQiangZhuang
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RANDOM_ATTR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RandomAttr entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRandomAttack());
        stmt.bindLong(3, entity.getRandomArmor());
        stmt.bindLong(4, entity.getRandomLife());
        stmt.bindLong(5, entity.getRandomLiLiang());
        stmt.bindLong(6, entity.getRandomMinJie());
        stmt.bindLong(7, entity.getRandomZhiHui());
        stmt.bindLong(8, entity.getRandomQiangZhuang());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RandomAttr entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRandomAttack());
        stmt.bindLong(3, entity.getRandomArmor());
        stmt.bindLong(4, entity.getRandomLife());
        stmt.bindLong(5, entity.getRandomLiLiang());
        stmt.bindLong(6, entity.getRandomMinJie());
        stmt.bindLong(7, entity.getRandomZhiHui());
        stmt.bindLong(8, entity.getRandomQiangZhuang());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RandomAttr readEntity(Cursor cursor, int offset) {
        RandomAttr entity = new RandomAttr( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // randomAttack
            cursor.getInt(offset + 2), // randomArmor
            cursor.getInt(offset + 3), // randomLife
            cursor.getInt(offset + 4), // randomLiLiang
            cursor.getInt(offset + 5), // randomMinJie
            cursor.getInt(offset + 6), // randomZhiHui
            cursor.getInt(offset + 7) // randomQiangZhuang
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RandomAttr entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRandomAttack(cursor.getInt(offset + 1));
        entity.setRandomArmor(cursor.getInt(offset + 2));
        entity.setRandomLife(cursor.getInt(offset + 3));
        entity.setRandomLiLiang(cursor.getInt(offset + 4));
        entity.setRandomMinJie(cursor.getInt(offset + 5));
        entity.setRandomZhiHui(cursor.getInt(offset + 6));
        entity.setRandomQiangZhuang(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RandomAttr entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RandomAttr entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RandomAttr entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
